name "localization_frontend"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "localization" # The IIR/FIR filter
using_library "urdfdom" # To know some information about ExoTeR URDF
using_library "threed_odometry" # 3D-Kinematics for the contact points

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from "FrontEndTypes.hpp"

# It processes the sensor values to facilitate data association
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #*************************
    #**** Task Properties ****
    #*************************
    property('urdf_file', '/std/string').
        doc "path to the rover urdf file"

    property('proprioceptive_output_frequency', 'double').
        doc 'Output frequency of the proprioceptive sensors samples (joints, inertial sensors and orientation).'

    #**************************
    #**** Frame Properties ****
    #**************************

    property('orientation_source_frame', '/std/string').doc 'Frame for the transformer'

    property('orientation_target_frame', '/std/string').doc 'Frame for the transformer'

    #**************************
    #**** Joint Properties ****
    #**************************

    property('all_joint_names', 'std/vector<std/string>').
        doc 'Locomotion joints searching by names.'

    property('contact_point_segments', 'std/vector<std/string>').
        doc 'Segment names for the segment of the last contact point in the URDF file. This is the last element per each chain.'

    property('contact_angle_segments', 'std/vector<std/string>').
        doc 'Segment names for the segment of the last contact angle in the URDF file.'

    property('slip_joint_names', 'std/vector<std/string>').
        doc 'Joints in the model which are part of the slip model.'

    property('contact_joint_names', 'std/vector<std/string>').
        doc 'Joints in the model which are part of the contact angle.'

    property('zero_position_joint_names', 'std/vector<std/string>').
        doc 'Locomotion joints sub-vector searching by names to set the position to zero. Empty by default'

    property('zero_speed_joint_names', 'std/vector<std/string>').
        doc 'Locomotion joints sub-vector searching by names to set the speed to zero. Empty by default'

    property('mimic_joint_names', 'localization_frontend::NamedVectorString').
        doc 'Joints which use other joints to mimic motion (position and velocity). Empty by default'

    property('translation_joint_names', 'localization_frontend::NamedVectorString').
        doc 'Joints which use other joints to convert angular rotation to translational displacement (position and speed). Empty by default'

    property('wheel_radius_joint_names', 'std/vector<std/string>').
        doc 'URDF joint names to know where the information is regarding the wheel radius.'

    property('passive_offset_joint_name', 'std/string').
        doc 'URDF joint names to know where the information is regarding the wheel radius.'

    #******************************
    #*** IIR Filter Properties ****
    #******************************
    property('filter_config', 'localization_frontend/FilterCoefficients').
        doc 'Configuration values to run the IIR/FIR filter over the noisy passive joints. Look in Types for further details.'

    property('filter_joint_names', 'std/vector<std/string>').
    doc 'Joints in which the filter wants to be apply. These joints names MUST be also contained in the joint_names. '+
        'Maximum number of three joints. In case more joints are required you need to change the code due to template classes. FILTER_VECTOR_SIZE'

    #********************************
    #**** Transformer Properties ****
    #********************************
    property('body_to_imu_transformation', 'base/samples/RigidBodyState').doc "T_body_to_imu which transform samples from imu-frame to body-frame."

    #**************************
    #******* Input ports  *********
    #******************************

    #******* Proprioceptive sensors *********
    input_port('joints_samples', '/base/samples/Joints').
        needs_reliable_connection.
        doc 'Timestamped robot joints.'

    input_port('inertial_samples', '/base/samples/IMUSensors').
        needs_reliable_connection.
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings (linear acceleration and angular velocity).'

    input_port('orientation_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'provides timestamped IMU orientation samples containing the quaternion (some IMUs provide this information from internal filters).'

    ##############################################
    # Transformer:
    # All robot transformations are required
    # to compute the sensor output in body frame.
    ##############################################
    stream_aligner do
        align_port("joints_samples", 0.04)
        align_port("inertial_samples", 0.04)
        align_port("orientation_samples", 0.008)
        max_latency(1.0)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('joints_samples_out', '/base/samples/Joints').
        doc 'Timestamped joints (active and passive) state samples providing odometry information.'

    output_port('inertial_samples_out', '/base/samples/IMUSensors').
        doc 'Calibrated and compensated inertial measurements.'

    output_port('orientation_samples_out', '/base/samples/RigidBodyState').
        doc 'Orientation samples measurements.'

    port_driven

end

