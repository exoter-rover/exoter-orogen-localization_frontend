name "localization_frontend"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "frame_helper" # Image Frames
using_library "localization" # The IIR/FIR filter

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from "frame_helper/Calibration.h"

import_types_from "FrontEndTypes.hpp"

# It processes the sensor values to facilitate data association
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #*************************
    #**** Task Properties ****
    #*************************
    property('proprioceptive_output_frequency', 'double').
        doc 'Output frequency of the proprioceptive sensors samples (joints, inertial sensors and orientation).'

    property('navigation_source_frame', '/std/string').doc 'From Frame for the transformer'

    property('navigation_target_frame', '/std/string').doc 'To Frame for the transformer'

    property('reference_source_frame', '/std/string').doc 'From Frame for the transformer'

    property('reference_target_frame', '/std/string').doc 'To Frame for the transformer'

    property('world_source_frame', '/std/string').doc 'From Frame for the transformer'

    property('world_target_frame', '/std/string').doc 'To Frame for the transformer'

    property('jointNames', 'std/vector<std/string>').
	doc 'Locomotion joints searching by names.'

    #**********************************
    #**** Exteroceptive Properties ****
    #**********************************
    property('exteroceptive_output_name', 'std/vector<std/string>').
	doc 'Exteroceptive sensor names as input ports in the task.'

    property('exteroceptive_output_distance',  'std/vector<double>').
        doc 'Output estimated distance in meters between exteroceptive sensors samples (laser scans, camera images).'

    property('exteroceptive_jointNames', 'std/vector<std/string>').
	doc 'Locomotion joints searching by names in order to compute relative movement.'

    property('wheelRadius', 'double').
	doc 'Effective wheel radius average for odometry'

    #******************************
    #*** IIR Filter Properties ****
    #******************************
    property('filter_config', 'localization_frontend/FilterCoefficients').
        doc 'Configuration values to run the IIR/FIR filter over the noisy passive joints. Look in Types for further details.'

    property('filter_jointNames', 'std/vector<std/string>').
	doc 'Joints in which the filter wants to be apply. These joints names MUST be also contained in the jointNames. '+
        'Maximum number of three joints. In case more joints are required you need to change the code due to template classes. FILTER_VECTOR_SIZE'

    #******************************
    #**** Camera Properties ********
    #*******************************
    property("left_camera_parameters", 'frame_helper/CameraCalibration').
        doc 'Camera intrinsic parameters.'

    property("right_camera_parameters", 'frame_helper/CameraCalibration').
        doc 'Camera intrinsic parameters.'

    #******************************
    #******* Input ports  *********
    #******************************

    #******* Proprioceptive sensors *********
    input_port('joints_samples', '/base/samples/Joints').
        needs_reliable_connection.
	doc 'Timestamped robot joints.'

    input_port('inertial_samples', '/base/samples/IMUSensors').
        needs_reliable_connection.
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings (linear acceleration and angular velocity).'

    input_port('orientation_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'provides timestamped IMU orientation samples containing the quaternion (some IMUs provide this information from internal filters).'

    #*******  Exteroceptive sensors *********
    input_port("left_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Left camera frame.'

    input_port("right_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Right camera frame.'

    input_port('point_cloud_samples', '/base/samples/Pointcloud').
	doc 'timestamped laser scans'

    #******* External Ground Truth *********
    input_port("reference_pose_samples", "/base/samples/RigidBodyState").
        doc "Rover position and orientation information."

    ##############################################
    # Transformer:
    # All robot transformations are required
    # to compute the sensor output in body frame.
    ##############################################
    transformer do
	transform "imu", "body" # imu to body in "Source in target" convention
        transform "laser", "body" # laser to body in "Source in target" convention
	align_port("joints_samples", 0.04)
	align_port("inertial_samples", 0.04)
	align_port("orientation_samples", 0.008)
	align_port("left_frame", 0.5)
	align_port("right_frame", 0.5)
	align_port("point_cloud_samples", 0.025)
	align_port("reference_pose_samples", 0.01)
	max_latency(1.0)
    end

    #******************************
    #******* Output Ports *********
    #******************************

    output_port('joints_samples_out', '/base/samples/Joints').
	doc 'Timestamped joints (active and passive) state samples providing odometry information.'

    output_port('inertial_samples_out', '/base/samples/IMUSensors').
	doc 'Calibrated and compensated inertial measurements.'

    output_port('orientation_samples_out', '/base/samples/RigidBodyState').
	doc 'Orientation samples measurements.'

    output_port('point_cloud_samples_out', 'base/samples/Pointcloud').
	doc 'Point cloud samples.'

    output_port("left_frame_out", ro_ptr('base::samples::frame::Frame')).
        doc 'Undistorted Left camera frame (after synchronization with the dynamixel)'

    output_port("right_frame_out", ro_ptr('base::samples::frame::Frame')).
        doc 'Undistorted Right camera frame (after synchronization with the dynamixel).'

    output_port('reference_pose_samples_out', 'base/samples/RigidBodyState').
	doc 'Pose and velocities computed by the ground truth system.'

    output_port('reference_delta_pose_samples_out', 'base/samples/RigidBodyState').
	doc 'Delta pose and velocities computed from the ground truth system.'

    output_port('world_osg_to_world_out', 'base/samples/RigidBodyState').
	doc 'Transformation for the transformer: world_osg frame (North-East-Up) expressed in the estimated intermediate world frame.'

    output_port('world_to_navigation_out', 'base/samples/RigidBodyState').
	doc 'Transformation for the transformer: navigation frame (initial starting point) expressed in the world frame.'

    #**********************************
    #******* Output Debug Ports *******
    #**********************************
    property('output_debug', 'bool', false).
	doc 'Set to true if output debug information is desirable.'

    output_port('angular_position', 'double').
	doc 'Angular position of the FL wheel'

    output_port('angular_rate', 'double').
	doc 'Angular velocity of the FL wheel'

    output_port('angular_rate_old', 'double').
	doc 'Angular velocity of the FL wheel(using 2nd order)'

    #*********************************
    #******* Extra Task States *******
    #*********************************
    runtime_states :INITIAL_POSITIONING
    exception_states :NAN_ERROR

    port_driven

end

